package com.senderman.lastkatkabot.tempobjects

import com.annimon.tgbotsmodule.api.methods.Methods
import com.senderman.lastkatkabot.Services
import com.senderman.lastkatkabot.callbacks.Callbacks
import com.senderman.neblib.TgUser
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.objects.CallbackQuery
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import java.util.concurrent.ThreadLocalRandom

class Duel(message: Message) {
    private val chatId: Long = message.chatId
    private val player1: TgUser = TgUser(message.from)
    private lateinit var player2: TgUser
    private val messageId: Int
    val duelId: String

    init {
        val sm = Methods.sendMessage()
            .setChatId(chatId)
            .setText("\uD83C\uDFAF –ù–∞–±–æ—Ä –Ω–∞ –¥—É—ç–ª—å! –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–î–∂–æ–π–Ω—É–ª–∏—Å—å:\n${player1.name}")
            .setReplyMarkup(getDuelReplyMarkup())
        messageId = Services.handler.sendMessage(sm).messageId
        duelId = "$chatId $messageId"
    }


    fun join(query: CallbackQuery) {
        if (this::player2.isInitialized) {
            answerCallbackQuery(query, "\uD83D\uDEAB –î—É—ç–ª—è–Ω—Ç–æ–≤ —É–∂–µ –Ω–∞–±—Ä–∞–ª–∏, —É–≤—ã", true)
            return
        }
        if (query.from.id == player1.id) {
            answerCallbackQuery(
                query,
                "\uD83D\uDC7A –Ø –¥—É–º–∞—é, —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç —Å—Ö–æ–¥–∏—Ç—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É! –¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è",
                true
            )
            return
        }
        player2 = TgUser(query.from.id, query.from.firstName)
        answerCallbackQuery(query, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥—É—ç–ª–∏!", false)
        start()
    }

    private fun start() {
        val randomInt = ThreadLocalRandom.current().nextInt(100)
        val winner = if (randomInt < 50) player1 else player2
        val loser = if (randomInt < 50) player2 else player1
        val winnerName = winner.name
        val loserName = loser.name

        var duelResult = """
                <b>–î—É—ç–ª—å</b>
                ${player1.name} vs ${player2.name}
                
                –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ —Ä–∞–∑–æ—à–ª–∏—Å—å –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –ª–∏—Ü–æ–º –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É, –∏ $winnerName –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –ø–µ—Ä–≤—ã–º!
                $loserName –ª–µ–∂–∏—Ç –Ω–∞ –∑–µ–º–ª–µ, –∏—Å—Ç–µ–∫–∞—è –∫—Ä–æ–≤—å—é!
                """.trimIndent() + "\n"

        if (ThreadLocalRandom.current().nextInt(100) < 20) {
            duelResult += """
                   –ù–æ, —É–º–∏—Ä–∞—è, $loserName —É—Å–ø–µ–≤–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ –≥–æ–ª–æ–≤—É $winnerName!
                    $winnerName –ø–∞–¥–∞–µ—Ç –∑–∞–º–µ—Ä—Ç–≤–æ!
                   üíÄ <b>–î—É—ç–ª—å –æ–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π!</b>
                   """.trimIndent()
            Services.db.incTotalDuels(winner.id)
            Services.db.incTotalDuels(loser.id)
        } else {
            duelResult += "\uD83D\uDC51 <b>$winnerName –≤—ã–∏–≥—Ä–∞–ª –¥—É—ç–ª—å!</b>"
            Services.db.incDuelWins(winner.id)
            Services.db.incTotalDuels(loser.id)
        }

        Methods.editMessageText()
            .setChatId(chatId)
            .setMessageId(messageId)
            .setText(duelResult)
            .setParseMode(ParseMode.HTML)
            .call(Services.handler)
        Services.handler.duels.remove(duelId)
    }

    companion object {
        fun answerCallbackQuery(query: CallbackQuery, text: String?, showAsAlert: Boolean) {
            Methods.answerCallbackQuery()
                .setText(text)
                .setCallbackQueryId(query.id)
                .setShowAlert(showAsAlert)
                .call(Services.handler)
        }

        private fun getDuelReplyMarkup(): InlineKeyboardMarkup {
            val markup = InlineKeyboardMarkup()
            markup.keyboard = listOf(
                listOf(
                    InlineKeyboardButton()
                        .setText("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
                        .setCallbackData(Callbacks.JOIN_DUEL)
                )
            )
            return markup
        }
    }
}