package com.senderman.lastkatkabot.usercommands

import com.annimon.tgbotsmodule.api.methods.Methods
import com.senderman.lastkatkabot.LastkatkaBotHandler
import com.senderman.lastkatkabot.Services
import com.senderman.neblib.CommandExecutor
import com.senderman.neblib.TgUser
import org.telegram.telegrambots.meta.api.objects.Message

class Stats(private val handler: LastkatkaBotHandler) : CommandExecutor {
    override val command: String
        get() = "/stats"
    override val desc: String
        get() = "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –†–µ–ø–ª–∞–µ–º –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–ª–∞–π–Ω—É—Ç–æ–≥–æ"

    override fun execute(message: Message) {
        val player = if (!message.isReply) message.from else message.replyToMessage.from
        if (player.bot) {
            handler.sendMessage(
                message.chatId, "–ù–æ —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞! " +
                        "–†–∞–∑–≤–µ –º–æ–∂–µ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∏–º—Ñ–æ–Ω–∏—é, –∏–º–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–≥—Ä–∞—Ç—å –≤ BnC, –ª—é–±–∏—Ç—å?"
            )
            return
        }
        val user = TgUser(player)
        val stats = Services.db.getStats(player.id)
        val (_, duelWins, totalDuels, bnc, loverId, childId, coins) = stats
        val winRate = if (totalDuels == 0) 0 else 100 * duelWins / totalDuels
        var text = """
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${user.name}:

            –î—É—ç–ª–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ: $duelWins
            –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: $totalDuels
            –í–∏–Ω—Ä–µ–π—Ç: $winRate%
            
            üí∞ –î–µ–Ω—å–≥–∏: $coins
            üêÆ –ë–∞–ª–ª–æ–≤ –∑–∞ –±—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã: $bnc
        """.trimIndent()

        text += connectUserToStats(message, loverId, AnotherUser.LOVER)
        text += connectUserToStats(message, childId, AnotherUser.CHILD)
        text += "\n\n–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç–æ–∫? –ò–≥—Ä–∞–π –≤ @miniroulette_bot!"
        handler.sendMessage(message.chatId, text)
    }

    private enum class AnotherUser(val title: String) {
        LOVER("\n‚ù§Ô∏è –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞: "),
        CHILD("\n\uD83D\uDC76\uD83C\uDFFBÔ∏è –†–µ–±–µ–Ω–æ–∫: ")
    }

    /**
     * Add line about user connected to userId
     * @param message - message object of /stats caller
     * @param userId - ID of connected user
     * @param type - type of connected user
     * @return empty string if userId == 0, else type.title + link to user if message is pm, or user'name if not pm
     */

    private fun connectUserToStats(message: Message, userId: Int, type: AnotherUser): String {
        if (userId == 0)
            return ""

        val user: TgUser =
            try {
                TgUser(Methods.getChatMember(userId.toLong(), userId).call(handler).user)
            } catch (e: Exception) {
                try {
                    TgUser(Methods.getChatMember(message.chatId, userId).call(handler).user)
                } catch (e: Exception) {
                    TgUser(userId, "–ë–µ–∑ –∏–º–µ–Ω–∏")
                }
            }

        return type.title + if (message.isUserMessage) user.link else user.name
    }
}