package com.senderman.lastkatkabot.callback;

import com.annimon.tgbotsmodule.api.methods.Methods;
import com.annimon.tgbotsmodule.commands.context.CallbackQueryContext;
import com.senderman.lastkatkabot.dbservice.MarriageRequestService;
import com.senderman.lastkatkabot.dbservice.UserStatsService;
import com.senderman.lastkatkabot.util.Html;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class MarriageCallback implements CallbackExecutor {

    private final UserStatsService userStats;
    private final MarriageRequestService marriages;

    public MarriageCallback(UserStatsService userStats, MarriageRequestService marriages) {
        this.userStats = userStats;
        this.marriages = marriages;
    }

    @Override
    public String getTrigger() {
        return Callbacks.MARRIAGE;
    }

    @Override
    public void execute(CallbackQueryContext ctx) {
        if (ctx.data().endsWith("accept"))
            acceptMarriage(ctx);
        else
            declineMarriage(ctx);
    }

    private void acceptMarriage(CallbackQueryContext ctx) {
        var requestOptional = marriages.findById(Integer.parseInt(ctx.data().split("\\s+")[1]));
        if (requestOptional.isEmpty()) {
            ctx.answerAsAlert("–í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ—Ç–µ—Ä—è–ª–∏ –≤ –ó–ê–ì–°–µ!").callAsync(ctx.sender);
            ctx.editMessage("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ó–ê–ì–°–µ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑").callAsync(ctx.sender);
            return;
        }
        var r = requestOptional.get();
        // query user id should match with proposee id
        if (!ctx.user().getId().equals(r.getProposeeId())) {
            ctx.answerAsAlert("–≠—Ç–æ –Ω–µ –≤–∞–º!").callAsync(ctx.sender);
            return;
        }
        var proposeeStats = userStats.findById(r.getProposeeId());
        // proposee should not have lover
        if (proposeeStats.hasLover()) {
            ctx.answerAsAlert("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É!").callAsync(ctx.sender);
            ctx.editMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + r.getProposeeName() + " —É–∂–µ –∏–º–µ–µ—Ç –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É!").callAsync(ctx.sender);
            marriages.delete(r);
            return;
        }
        var proposerStats = userStats.findById(r.getProposerId());
        // proposer also should not have lover
        if (proposerStats.hasLover()) {
            ctx.answerAsAlert("–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π!").callAsync(ctx.sender);
            ctx.answerAsAlert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + r.getProposerName() + " —É–∂–µ –∏–º–µ–µ—Ç –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É!").callAsync(ctx.sender);
            marriages.delete(r);
            return;
        }
        // if everything is ok, proceed to marriage
        proposerStats.setLoverId(r.getProposeeId());
        proposeeStats.setLoverId(r.getProposerId());
        // all marriage request with these ones are obsolete now
        marriages.deleteByProposerIdOrProposeeId(r.getProposerId(), r.getProposeeId());
        userStats.saveAll(List.of(proposerStats, proposeeStats));
        ctx.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!").callAsync(ctx.sender);
        ctx.editMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + r.getProposeeName() + " –ø—Ä–∏–Ω—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!").callAsync(ctx.sender);
        Methods.sendMessage()
                .setChatId(r.getProposerId())
                .setText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + r.getProposeeName() + " –ø—Ä–∏–Ω—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!")
                .callAsync(ctx.sender);

        Methods.sendMessage()
                .setChatId(ctx.message().getChatId())
                .setText(String.format("üíê –£ %s –∏ %s —Å–≤–∞–¥—å–±–∞! –î–∞–≤–∞–π—Ç–µ –∏—Ö –ø–æ–∑–¥—Ä–∞–≤–∏–º –∏ —Å—ä–µ–¥–∏–º —à–∞–≤—É—Ö—É üåØ !!!",
                        r.getProposerName(), r.getProposeeName()))
                .callAsync(ctx.sender);
    }

    private void declineMarriage(CallbackQueryContext ctx) {
        var requestId = Integer.parseInt(ctx.data().split("\\s+")[1]);
        marriages.deleteById(requestId);
        ctx.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –±—Ä–∞–∫–∞!").callAsync(ctx.sender);
        ctx.editMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + Html.getUserLink(ctx.user()) + " –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –±—Ä–∞–∫–∞!").callAsync(ctx.sender);
    }
}
